{"ast":null,"code":"var _jsxFileName = \"D:\\\\portfolio\\\\frontend\\\\src\\\\components\\\\Web\\\\MeasurementConversion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeasurementConversion = () => {\n  _s();\n  const [selectedCategory, setSelectedCategory] = useState('weight');\n  const [fromUnit, setFromUnit] = useState('gram (g)');\n  const [toUnit, setToUnit] = useState('kilogram (kg)');\n  const [value, setValue] = useState('');\n  const [result, setResult] = useState('');\n  const units = {\n    weight: ['gram (g)', 'kilogram (kg)', 'pound (lb)', 'ounce (oz)'],\n    height: ['meter (m)', 'centimeter (cm)', 'inch (in)', 'foot (ft)'],\n    volume: ['liter (L)', 'milliliter (mL)', 'cubic meter (m³)', 'cubic centimeter (cm³)'],\n    distance: ['kilometer (km)', 'meter (m)', 'mile (mi)', 'yard (yd)'],\n    length: ['meter (m)', 'centimeter (cm)', 'millimeter (mm)', 'inch (in)'],\n    temperature: ['Celsius (°C)', 'Fahrenheit (°F)', 'Kelvin (K)'],\n    speed: ['meter per second (m/s)', 'kilometer per hour (km/h)', 'mile per hour (mph)']\n  };\n  const handleCategoryChange = category => {\n    setSelectedCategory(category);\n    setFromUnit(units[category][0]);\n    setToUnit(units[category][1]);\n    setValue('');\n    setResult('');\n  };\n  const convert = () => {\n    let conversionFactor = 1;\n\n    // Define conversion logic based on the selected category and units\n    const conversionTable = {\n      weight: {\n        'gram (g)': {\n          'kilogram (kg)': 0.001,\n          'pound (lb)': 0.00220462,\n          'ounce (oz)': 0.035274\n        },\n        'kilogram (kg)': {\n          'gram (g)': 1000,\n          'pound (lb)': 2.20462,\n          'ounce (oz)': 35.274\n        },\n        'pound (lb)': {\n          'gram (g)': 453.592,\n          'kilogram (kg)': 0.453592,\n          'ounce (oz)': 16\n        },\n        'ounce (oz)': {\n          'gram (g)': 28.3495,\n          'kilogram (kg)': 0.0283495,\n          'pound (lb)': 0.0625\n        }\n      }\n      // Add similar conversion logic for other categories like height, volume, etc.\n    };\n    if (fromUnit !== toUnit) {\n      var _conversionTable$sele, _conversionTable$sele2;\n      conversionFactor = ((_conversionTable$sele = conversionTable[selectedCategory]) === null || _conversionTable$sele === void 0 ? void 0 : (_conversionTable$sele2 = _conversionTable$sele[fromUnit]) === null || _conversionTable$sele2 === void 0 ? void 0 : _conversionTable$sele2[toUnit]) || 1;\n    }\n    setResult(Number(value) * conversionFactor);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"measurement-conversion\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Measurement Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Category: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCategory,\n        onChange: e => handleCategoryChange(e.target.value),\n        children: Object.keys(units).map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category,\n          children: category\n        }, category, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversion-inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"From: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: fromUnit,\n          onChange: e => setFromUnit(e.target.value),\n          children: units[selectedCategory].map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: unit,\n            children: unit\n          }, unit, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"To: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: toUnit,\n          onChange: e => setToUnit(e.target.value),\n          children: units[selectedCategory].map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: unit,\n            children: unit\n          }, unit, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: value,\n          onChange: e => setValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"convert-button\",\n      onClick: convert,\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversion-result\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Result: \", result]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(MeasurementConversion, \"Sucv9VsWvHJ2+BO8uhbmp/P3IEE=\");\n_c = MeasurementConversion;\nexport default MeasurementConversion;\nvar _c;\n$RefreshReg$(_c, \"MeasurementConversion\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MeasurementConversion","_s","selectedCategory","setSelectedCategory","fromUnit","setFromUnit","toUnit","setToUnit","value","setValue","result","setResult","units","weight","height","volume","distance","length","temperature","speed","handleCategoryChange","category","convert","conversionFactor","conversionTable","_conversionTable$sele","_conversionTable$sele2","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","Object","keys","map","unit","type","onClick","_c","$RefreshReg$"],"sources":["D:/portfolio/frontend/src/components/Web/MeasurementConversion.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './calculator.css';\r\n\r\nconst MeasurementConversion = () => {\r\n    const [selectedCategory, setSelectedCategory] = useState('weight');\r\n    const [fromUnit, setFromUnit] = useState('gram (g)');\r\n    const [toUnit, setToUnit] = useState('kilogram (kg)');\r\n    const [value, setValue] = useState('');\r\n    const [result, setResult] = useState('');\r\n\r\n    const units = {\r\n        weight: ['gram (g)', 'kilogram (kg)', 'pound (lb)', 'ounce (oz)'],\r\n        height: ['meter (m)', 'centimeter (cm)', 'inch (in)', 'foot (ft)'],\r\n        volume: ['liter (L)', 'milliliter (mL)', 'cubic meter (m³)', 'cubic centimeter (cm³)'],\r\n        distance: ['kilometer (km)', 'meter (m)', 'mile (mi)', 'yard (yd)'],\r\n        length: ['meter (m)', 'centimeter (cm)', 'millimeter (mm)', 'inch (in)'],\r\n        temperature: ['Celsius (°C)', 'Fahrenheit (°F)', 'Kelvin (K)'],\r\n        speed: ['meter per second (m/s)', 'kilometer per hour (km/h)', 'mile per hour (mph)']\r\n    };\r\n\r\n    const handleCategoryChange = (category) => {\r\n        setSelectedCategory(category);\r\n        setFromUnit(units[category][0]);\r\n        setToUnit(units[category][1]);\r\n        setValue('');\r\n        setResult('');\r\n    };\r\n\r\n    const convert = () => {\r\n        let conversionFactor = 1;\r\n\r\n        // Define conversion logic based on the selected category and units\r\n        const conversionTable = {\r\n            weight: {\r\n                'gram (g)': { 'kilogram (kg)': 0.001, 'pound (lb)': 0.00220462, 'ounce (oz)': 0.035274 },\r\n                'kilogram (kg)': { 'gram (g)': 1000, 'pound (lb)': 2.20462, 'ounce (oz)': 35.274 },\r\n                'pound (lb)': { 'gram (g)': 453.592, 'kilogram (kg)': 0.453592, 'ounce (oz)': 16 },\r\n                'ounce (oz)': { 'gram (g)': 28.3495, 'kilogram (kg)': 0.0283495, 'pound (lb)': 0.0625 }\r\n            },\r\n            // Add similar conversion logic for other categories like height, volume, etc.\r\n        };\r\n\r\n        if (fromUnit !== toUnit) {\r\n            conversionFactor = conversionTable[selectedCategory]?.[fromUnit]?.[toUnit] || 1;\r\n        }\r\n\r\n        setResult(Number(value) * conversionFactor);\r\n    };\r\n\r\n    return (\r\n        <div className=\"measurement-conversion\">\r\n            <h2>Measurement Conversion</h2>\r\n\r\n            <div className=\"category-select\">\r\n                <label>Category: </label>\r\n                <select value={selectedCategory} onChange={(e) => handleCategoryChange(e.target.value)}>\r\n                    {Object.keys(units).map(category => (\r\n                        <option key={category} value={category}>{category}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"conversion-inputs\">\r\n                <div>\r\n                    <label>From: </label>\r\n                    <select value={fromUnit} onChange={(e) => setFromUnit(e.target.value)}>\r\n                        {units[selectedCategory].map(unit => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>To: </label>\r\n                    <select value={toUnit} onChange={(e) => setToUnit(e.target.value)}>\r\n                        {units[selectedCategory].map(unit => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Value: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={value}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <button className=\"convert-button\" onClick={convert}>Convert</button>\r\n\r\n            {result && (\r\n                <div className=\"conversion-result\">\r\n                    <h3>Result: {result}</h3>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MeasurementConversion;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGN,QAAQ,CAAC,QAAQ,CAAC;EAClE,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,UAAU,CAAC;EACpD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,eAAe,CAAC;EACrD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMe,KAAK,GAAG;IACVC,MAAM,EAAE,CAAC,UAAU,EAAE,eAAe,EAAE,YAAY,EAAE,YAAY,CAAC;IACjEC,MAAM,EAAE,CAAC,WAAW,EAAE,iBAAiB,EAAE,WAAW,EAAE,WAAW,CAAC;IAClEC,MAAM,EAAE,CAAC,WAAW,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,wBAAwB,CAAC;IACtFC,QAAQ,EAAE,CAAC,gBAAgB,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC;IACnEC,MAAM,EAAE,CAAC,WAAW,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,WAAW,CAAC;IACxEC,WAAW,EAAE,CAAC,cAAc,EAAE,iBAAiB,EAAE,YAAY,CAAC;IAC9DC,KAAK,EAAE,CAAC,wBAAwB,EAAE,2BAA2B,EAAE,qBAAqB;EACxF,CAAC;EAED,MAAMC,oBAAoB,GAAIC,QAAQ,IAAK;IACvClB,mBAAmB,CAACkB,QAAQ,CAAC;IAC7BhB,WAAW,CAACO,KAAK,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/Bd,SAAS,CAACK,KAAK,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7BZ,QAAQ,CAAC,EAAE,CAAC;IACZE,SAAS,CAAC,EAAE,CAAC;EACjB,CAAC;EAED,MAAMW,OAAO,GAAGA,CAAA,KAAM;IAClB,IAAIC,gBAAgB,GAAG,CAAC;;IAExB;IACA,MAAMC,eAAe,GAAG;MACpBX,MAAM,EAAE;QACJ,UAAU,EAAE;UAAE,eAAe,EAAE,KAAK;UAAE,YAAY,EAAE,UAAU;UAAE,YAAY,EAAE;QAAS,CAAC;QACxF,eAAe,EAAE;UAAE,UAAU,EAAE,IAAI;UAAE,YAAY,EAAE,OAAO;UAAE,YAAY,EAAE;QAAO,CAAC;QAClF,YAAY,EAAE;UAAE,UAAU,EAAE,OAAO;UAAE,eAAe,EAAE,QAAQ;UAAE,YAAY,EAAE;QAAG,CAAC;QAClF,YAAY,EAAE;UAAE,UAAU,EAAE,OAAO;UAAE,eAAe,EAAE,SAAS;UAAE,YAAY,EAAE;QAAO;MAC1F;MACA;IACJ,CAAC;IAED,IAAIT,QAAQ,KAAKE,MAAM,EAAE;MAAA,IAAAmB,qBAAA,EAAAC,sBAAA;MACrBH,gBAAgB,GAAG,EAAAE,qBAAA,GAAAD,eAAe,CAACtB,gBAAgB,CAAC,cAAAuB,qBAAA,wBAAAC,sBAAA,GAAjCD,qBAAA,CAAoCrB,QAAQ,CAAC,cAAAsB,sBAAA,uBAA7CA,sBAAA,CAAgDpB,MAAM,CAAC,KAAI,CAAC;IACnF;IAEAK,SAAS,CAACgB,MAAM,CAACnB,KAAK,CAAC,GAAGe,gBAAgB,CAAC;EAC/C,CAAC;EAED,oBACIxB,OAAA;IAAK6B,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnC9B,OAAA;MAAA8B,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE/BlC,OAAA;MAAK6B,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5B9B,OAAA;QAAA8B,QAAA,EAAO;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzBlC,OAAA;QAAQS,KAAK,EAAEN,gBAAiB;QAACgC,QAAQ,EAAGC,CAAC,IAAKf,oBAAoB,CAACe,CAAC,CAACC,MAAM,CAAC5B,KAAK,CAAE;QAAAqB,QAAA,EAClFQ,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC,CAAC2B,GAAG,CAAClB,QAAQ,iBAC5BtB,OAAA;UAAuBS,KAAK,EAAEa,QAAS;UAAAQ,QAAA,EAAER;QAAQ,GAApCA,QAAQ;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAqC,CAC7D;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAENlC,OAAA;MAAK6B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAC9B9B,OAAA;QAAA8B,QAAA,gBACI9B,OAAA;UAAA8B,QAAA,EAAO;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrBlC,OAAA;UAAQS,KAAK,EAAEJ,QAAS;UAAC8B,QAAQ,EAAGC,CAAC,IAAK9B,WAAW,CAAC8B,CAAC,CAACC,MAAM,CAAC5B,KAAK,CAAE;UAAAqB,QAAA,EACjEjB,KAAK,CAACV,gBAAgB,CAAC,CAACqC,GAAG,CAACC,IAAI,iBAC7BzC,OAAA;YAAmBS,KAAK,EAAEgC,IAAK;YAAAX,QAAA,EAAEW;UAAI,GAAxBA,IAAI;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA6B,CACjD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACNlC,OAAA;QAAA8B,QAAA,gBACI9B,OAAA;UAAA8B,QAAA,EAAO;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnBlC,OAAA;UAAQS,KAAK,EAAEF,MAAO;UAAC4B,QAAQ,EAAGC,CAAC,IAAK5B,SAAS,CAAC4B,CAAC,CAACC,MAAM,CAAC5B,KAAK,CAAE;UAAAqB,QAAA,EAC7DjB,KAAK,CAACV,gBAAgB,CAAC,CAACqC,GAAG,CAACC,IAAI,iBAC7BzC,OAAA;YAAmBS,KAAK,EAAEgC,IAAK;YAAAX,QAAA,EAAEW;UAAI,GAAxBA,IAAI;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA6B,CACjD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACNlC,OAAA;QAAA8B,QAAA,gBACI9B,OAAA;UAAA8B,QAAA,EAAO;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACtBlC,OAAA;UACI0C,IAAI,EAAC,QAAQ;UACbjC,KAAK,EAAEA,KAAM;UACb0B,QAAQ,EAAGC,CAAC,IAAK1B,QAAQ,CAAC0B,CAAC,CAACC,MAAM,CAAC5B,KAAK;QAAE;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAENlC,OAAA;MAAQ6B,SAAS,EAAC,gBAAgB;MAACc,OAAO,EAAEpB,OAAQ;MAAAO,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAEpEvB,MAAM,iBACHX,OAAA;MAAK6B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAC9B9B,OAAA;QAAA8B,QAAA,GAAI,UAAQ,EAACnB,MAAM;MAAA;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAChC,EAAA,CA/FID,qBAAqB;AAAA2C,EAAA,GAArB3C,qBAAqB;AAiG3B,eAAeA,qBAAqB;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}