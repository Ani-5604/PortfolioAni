{"ast":null,"code":"var _jsxFileName = \"D:\\\\portfolio\\\\frontend\\\\src\\\\components\\\\Web\\\\MeasurementConversion.js\",\n  _s = $RefreshSig$();\n// src/MeasurementConversion.js\nimport React, { useState } from 'react';\nimport './calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeasurementConversion = () => {\n  _s();\n  const [fromUnit, setFromUnit] = useState('meters');\n  const [toUnit, setToUnit] = useState('kilometers');\n  const [inputValue, setInputValue] = useState('');\n  const [result, setResult] = useState('');\n  const units = {\n    length: ['meters', 'kilometers', 'miles', 'feet', 'inches'],\n    weight: ['grams', 'kilograms', 'pounds', 'ounces'],\n    temperature: ['celsius', 'fahrenheit', 'kelvin']\n  };\n  const convert = () => {\n    // Implement conversion logic here\n    // This is just an example; you would need to replace it with actual conversion formulas\n    if (fromUnit === toUnit) {\n      setResult(inputValue);\n    } else {\n      // Example conversion logic\n      setResult(Number(inputValue) * 0.001); // Placeholder logic\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"measurement-conversion\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator-label\",\n      children: \"Measurement Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversion-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"input-field\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        placeholder: \"Enter value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unit-selectors\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: fromUnit,\n          onChange: e => setFromUnit(e.target.value),\n          children: units.length.map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: unit,\n            children: unit\n          }, unit, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"to\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: toUnit,\n          onChange: e => setToUnit(e.target.value),\n          children: units.length.map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: unit,\n            children: unit\n          }, unit, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"convert-button\",\n        onClick: convert,\n        children: \"Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: `Result: ${result} ${toUnit}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(MeasurementConversion, \"ZMP35O9W1HPGYtfGWqDA7C3o5tc=\");\n_c = MeasurementConversion;\nexport default MeasurementConversion;\nvar _c;\n$RefreshReg$(_c, \"MeasurementConversion\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MeasurementConversion","_s","fromUnit","setFromUnit","toUnit","setToUnit","inputValue","setInputValue","result","setResult","units","length","weight","temperature","convert","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","map","unit","onClick","_c","$RefreshReg$"],"sources":["D:/portfolio/frontend/src/components/Web/MeasurementConversion.js"],"sourcesContent":["// src/MeasurementConversion.js\r\nimport React, { useState } from 'react';\r\nimport './calculator.css';\r\n\r\nconst MeasurementConversion = () => {\r\n    const [fromUnit, setFromUnit] = useState('meters');\r\n    const [toUnit, setToUnit] = useState('kilometers');\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [result, setResult] = useState('');\r\n\r\n    const units = {\r\n        length: ['meters', 'kilometers', 'miles', 'feet', 'inches'],\r\n        weight: ['grams', 'kilograms', 'pounds', 'ounces'],\r\n        temperature: ['celsius', 'fahrenheit', 'kelvin'],\r\n    };\r\n\r\n    const convert = () => {\r\n        // Implement conversion logic here\r\n        // This is just an example; you would need to replace it with actual conversion formulas\r\n        if (fromUnit === toUnit) {\r\n            setResult(inputValue);\r\n        } else {\r\n            // Example conversion logic\r\n            setResult(Number(inputValue) * 0.001); // Placeholder logic\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"measurement-conversion\">\r\n            <div className=\"calculator-label\">Measurement Conversion</div>\r\n            <div className=\"conversion-section\">\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"input-field\"\r\n                    value={inputValue}\r\n                    onChange={(e) => setInputValue(e.target.value)}\r\n                    placeholder=\"Enter value\"\r\n                />\r\n                <div className=\"unit-selectors\">\r\n                    <select value={fromUnit} onChange={(e) => setFromUnit(e.target.value)}>\r\n                        {units.length.map((unit) => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                    <span>to</span>\r\n                    <select value={toUnit} onChange={(e) => setToUnit(e.target.value)}>\r\n                        {units.length.map((unit) => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <button className=\"convert-button\" onClick={convert}>Convert</button>\r\n                {result && <div className=\"result\">{`Result: ${result} ${toUnit}`}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MeasurementConversion;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}