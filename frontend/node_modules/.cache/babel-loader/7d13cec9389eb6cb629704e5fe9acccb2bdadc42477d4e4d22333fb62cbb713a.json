{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import'./Todolist.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Todolist=()=>{const[taskText,setTaskText]=useState('');const[startTime,setStartTime]=useState('');const[endTime,setEndTime]=useState('');const[tasks,setTasks]=useState([]);const[completedTasks,setCompletedTasks]=useState([]);useEffect(()=>{// Load tasks from localStorage or an API if needed\n},[]);const handleAddTask=()=>{if(taskText&&startTime&&endTime){const newTask={id:Date.now(),text:taskText,startTime:new Date(startTime),endTime:new Date(endTime),completedAt:null};setTasks([...tasks,newTask]);setTaskText('');setStartTime('');setEndTime('');scheduleNotification(newTask);}};const handleCompleteTask=id=>{setTasks(tasks.filter(task=>task.id!==id));const completedTask=tasks.find(task=>task.id===id);if(completedTask){completedTask.completedAt=new Date();setCompletedTasks([...completedTasks,completedTask]);}};const handleDeleteTask=(id,type)=>{if(type==='tasks'){setTasks(tasks.filter(task=>task.id!==id));}else{setCompletedTasks(completedTasks.filter(task=>task.id!==id));}};const scheduleNotification=task=>{const currentTime=new Date();const timeDiff=task.endTime.getTime()-currentTime.getTime();if(timeDiff>0){setTimeout(()=>{sendNotification(task);},timeDiff);}};const navigate=useNavigate();const handleBackToHome=()=>{navigate('/');// Adjust the route as needed\n};const sendNotification=task=>{fetch('/notify-task',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({task})}).then(response=>response.json()).then(data=>console.log(data)).catch(error=>console.error('Error sending notification:',error));};return/*#__PURE__*/_jsxs(\"div\",{className:\"todolist-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-section\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"To-Do List with Notifications\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:taskText,onChange:e=>setTaskText(e.target.value),placeholder:\"Enter task...\"}),/*#__PURE__*/_jsx(\"input\",{type:\"datetime-local\",value:startTime,onChange:e=>setStartTime(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"datetime-local\",value:endTime,onChange:e=>setEndTime(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleAddTask,children:\"Add Task\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"lists-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"task-list\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Pending Tasks\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"list\",children:tasks.map(task=>/*#__PURE__*/_jsxs(\"li\",{className:\"pending\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"task-number\",children:[\"Task \",tasks.indexOf(task)+1,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"task-text\",children:task.text}),/*#__PURE__*/_jsxs(\"span\",{className:\"date-time\",children:[\"Start Time: \",task.startTime.toLocaleDateString(),\" \",task.startTime.toLocaleTimeString(),\", End Time: \",task.endTime.toLocaleDateString(),\" \",task.endTime.toLocaleTimeString()]}),/*#__PURE__*/_jsxs(\"div\",{className:\"task-actions\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleCompleteTask(task.id),children:\"Complete\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDeleteTask(task.id,'tasks'),children:\"Delete\"})]})]},task.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"completed-list\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Completed Tasks\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"list\",children:completedTasks.map(task=>/*#__PURE__*/_jsxs(\"li\",{className:\"completed\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"task-number\",children:[\"Task \",completedTasks.indexOf(task)+1,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"task-text\",children:task.text}),/*#__PURE__*/_jsxs(\"span\",{className:\"date-time\",children:[\"Start Time: \",task.startTime.toLocaleDateString(),\" \",task.startTime.toLocaleTimeString(),\", End Time: \",task.endTime.toLocaleDateString(),\" \",task.endTime.toLocaleTimeString(),\", Completed At: \",task.completedAt?`${task.completedAt.toLocaleDateString()} ${task.completedAt.toLocaleTimeString()}`:'Not completed yet']}),/*#__PURE__*/_jsx(\"div\",{className:\"task-actions\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDeleteTask(task.id,'completedTasks'),children:\"Delete\"})})]},task.id))})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"btn-extra\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn extra\",onClick:()=>handleBackToHome('/Web'),children:\"Go back\"})})]});};export default Todolist;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","Todolist","taskText","setTaskText","startTime","setStartTime","endTime","setEndTime","tasks","setTasks","completedTasks","setCompletedTasks","handleAddTask","newTask","id","Date","now","text","completedAt","scheduleNotification","handleCompleteTask","filter","task","completedTask","find","handleDeleteTask","type","currentTime","timeDiff","getTime","setTimeout","sendNotification","navigate","handleBackToHome","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","className","children","value","onChange","e","target","placeholder","onClick","map","indexOf","toLocaleDateString","toLocaleTimeString"],"sources":["D:/New folder (2)/portfolio/frontend/src/components/Web/Todolist.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport './Todolist.css';\r\n\r\nconst Todolist = () => {\r\n    const [taskText, setTaskText] = useState('');\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [tasks, setTasks] = useState([]);\r\n    const [completedTasks, setCompletedTasks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Load tasks from localStorage or an API if needed\r\n    }, []);\r\n\r\n    const handleAddTask = () => {\r\n        if (taskText && startTime && endTime) {\r\n            const newTask = {\r\n                id: Date.now(),\r\n                text: taskText,\r\n                startTime: new Date(startTime),\r\n                endTime: new Date(endTime),\r\n                completedAt: null\r\n            };\r\n            setTasks([...tasks, newTask]);\r\n            setTaskText('');\r\n            setStartTime('');\r\n            setEndTime('');\r\n            scheduleNotification(newTask);\r\n        }\r\n    };\r\n\r\n    const handleCompleteTask = (id) => {\r\n        setTasks(tasks.filter(task => task.id !== id));\r\n        const completedTask = tasks.find(task => task.id === id);\r\n        if (completedTask) {\r\n            completedTask.completedAt = new Date();\r\n            setCompletedTasks([...completedTasks, completedTask]);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTask = (id, type) => {\r\n        if (type === 'tasks') {\r\n            setTasks(tasks.filter(task => task.id !== id));\r\n        } else {\r\n            setCompletedTasks(completedTasks.filter(task => task.id !== id));\r\n        }\r\n    };\r\n\r\n    const scheduleNotification = (task) => {\r\n        const currentTime = new Date();\r\n        const timeDiff = task.endTime.getTime() - currentTime.getTime();\r\n        \r\n        if (timeDiff > 0) {\r\n            setTimeout(() => {\r\n                sendNotification(task);\r\n            }, timeDiff);\r\n        }\r\n    };\r\n    const navigate = useNavigate();\r\n\r\n    const handleBackToHome = () => {\r\n        navigate('/'); // Adjust the route as needed\r\n    };\r\n    \r\n\r\n    const sendNotification = (task) => {\r\n        fetch('/notify-task', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ task })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => console.log(data))\r\n        .catch(error => console.error('Error sending notification:', error));\r\n    };\r\n\r\n    return (\r\n        <div className=\"todolist-container\">\r\n            <div className=\"form-section\">\r\n                <h1>To-Do List with Notifications</h1>\r\n                <div className=\"form-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={taskText}\r\n                        onChange={(e) => setTaskText(e.target.value)}\r\n                        placeholder=\"Enter task...\"\r\n                    />\r\n                    <input\r\n                        type=\"datetime-local\"\r\n                        value={startTime}\r\n                        onChange={(e) => setStartTime(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"datetime-local\"\r\n                        value={endTime}\r\n                        onChange={(e) => setEndTime(e.target.value)}\r\n                    />\r\n                    <button onClick={handleAddTask}>Add Task</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"lists-section\">\r\n                <div className=\"task-list\">\r\n                    <h2>Pending Tasks</h2>\r\n                    <ul className=\"list\">\r\n                        {tasks.map(task => (\r\n                            <li key={task.id} className=\"pending\">\r\n                                <span className=\"task-number\">Task {tasks.indexOf(task) + 1}:</span>\r\n                                <span className=\"task-text\">{task.text}</span>\r\n                                <span className=\"date-time\">\r\n                                    Start Time: {task.startTime.toLocaleDateString()} {task.startTime.toLocaleTimeString()},\r\n                                    End Time: {task.endTime.toLocaleDateString()} {task.endTime.toLocaleTimeString()}\r\n                                </span>\r\n                                <div className=\"task-actions\">\r\n                                    <button onClick={() => handleCompleteTask(task.id)}>Complete</button>\r\n                                    <button onClick={() => handleDeleteTask(task.id, 'tasks')}>Delete</button>\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"completed-list\">\r\n                    <h2>Completed Tasks</h2>\r\n                    <ul className=\"list\">\r\n                        {completedTasks.map(task => (\r\n                            <li key={task.id} className=\"completed\">\r\n                                <span className=\"task-number\">Task {completedTasks.indexOf(task) + 1}:</span>\r\n                                <span className=\"task-text\">{task.text}</span>\r\n                                <span className=\"date-time\">\r\n                                    Start Time: {task.startTime.toLocaleDateString()} {task.startTime.toLocaleTimeString()},\r\n                                    End Time: {task.endTime.toLocaleDateString()} {task.endTime.toLocaleTimeString()},\r\n                                    Completed At: {task.completedAt ? `${task.completedAt.toLocaleDateString()} ${task.completedAt.toLocaleTimeString()}` : 'Not completed yet'}\r\n                                </span>\r\n                                <div className=\"task-actions\">\r\n                                    <button onClick={() => handleDeleteTask(task.id, 'completedTasks')}>Delete</button>\r\n\r\n                                </div> \r\n                                   \r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className=\"btn-extra\">\r\n                <button className=\"btn extra\"onClick={()=>handleBackToHome('/Web')}>Go back</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todolist;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}