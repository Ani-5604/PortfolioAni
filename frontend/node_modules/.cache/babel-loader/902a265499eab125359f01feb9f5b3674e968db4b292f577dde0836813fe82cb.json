{"ast":null,"code":"var _jsxFileName = \"D:\\\\portfolio\\\\frontend\\\\src\\\\components\\\\Web\\\\MeasurementConversion.js\",\n  _s = $RefreshSig$();\n// src/MeasurementConversion.js\nimport React, { useState } from 'react';\nimport './calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeasurementConversion = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n  const convertMeasurement = () => {\n    // Basic conversion example (e.g., meters to kilometers)\n    const value = parseFloat(input);\n    if (!isNaN(value)) {\n      setResult(value / 1000 + ' km'); // Example: meters to kilometers\n    } else {\n      setResult('Invalid Input');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"measurement-conversion\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator-label\",\n      children: \"Measurement Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleChange,\n      placeholder: \"Enter meters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: convertMeasurement,\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Result: \", result]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(MeasurementConversion, \"Rn2yf1jfSoSMg1/LTdctDCg0n5U=\");\n_c = MeasurementConversion;\nexport default MeasurementConversion;\nvar _c;\n$RefreshReg$(_c, \"MeasurementConversion\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MeasurementConversion","_s","input","setInput","result","setResult","handleChange","e","target","value","convertMeasurement","parseFloat","isNaN","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/portfolio/frontend/src/components/Web/MeasurementConversion.js"],"sourcesContent":["// src/MeasurementConversion.js\r\nimport React, { useState } from 'react';\r\nimport './calculator.css';\r\nconst MeasurementConversion = () => {\r\n    const [input, setInput] = useState('');\r\n    const [result, setResult] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const convertMeasurement = () => {\r\n        // Basic conversion example (e.g., meters to kilometers)\r\n        const value = parseFloat(input);\r\n        if (!isNaN(value)) {\r\n            setResult(value / 1000 + ' km'); // Example: meters to kilometers\r\n        } else {\r\n            setResult('Invalid Input');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"measurement-conversion\">\r\n            <div className=\"calculator-label\">Measurement Conversion</div>\r\n            <input type=\"text\" value={input} onChange={handleChange} placeholder=\"Enter meters\" />\r\n            <button className=\"btn\" onClick={convertMeasurement}>Convert</button>\r\n            <div>Result: {result}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MeasurementConversion;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMS,YAAY,GAAIC,CAAC,IAAK;IACxBJ,QAAQ,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMD,KAAK,GAAGE,UAAU,CAACT,KAAK,CAAC;IAC/B,IAAI,CAACU,KAAK,CAACH,KAAK,CAAC,EAAE;MACfJ,SAAS,CAACI,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;IACrC,CAAC,MAAM;MACHJ,SAAS,CAAC,eAAe,CAAC;IAC9B;EACJ,CAAC;EAED,oBACIN,OAAA;IAAKc,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnCf,OAAA;MAAKc,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC9DnB,OAAA;MAAOoB,IAAI,EAAC,MAAM;MAACV,KAAK,EAAEP,KAAM;MAACkB,QAAQ,EAAEd,YAAa;MAACe,WAAW,EAAC;IAAc;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtFnB,OAAA;MAAQc,SAAS,EAAC,KAAK;MAACS,OAAO,EAAEZ,kBAAmB;MAAAI,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrEnB,OAAA;MAAAe,QAAA,GAAK,UAAQ,EAACV,MAAM;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEd,CAAC;AAACjB,EAAA,CA1BID,qBAAqB;AAAAuB,EAAA,GAArBvB,qBAAqB;AA4B3B,eAAeA,qBAAqB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}