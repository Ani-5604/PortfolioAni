{"ast":null,"code":"var _jsxFileName = \"D:\\\\portfolio\\\\frontend\\\\src\\\\components\\\\Web\\\\MeasurementConversion.js\",\n  _s = $RefreshSig$();\n// src/MeasurementConversion.js\nimport React, { useState } from 'react';\nimport './calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeasurementConversion = () => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [result, setResult] = useState('');\n  const [fromUnit, setFromUnit] = useState('gram');\n  const [toUnit, setToUnit] = useState('kilogram');\n  const [value, setValue] = useState('');\n  const units = {\n    weight: ['gram (g)', 'kilogram (kg)', 'pound (lb)', 'ounce (oz)'],\n    height: ['meter (m)', 'centimeter (cm)', 'inch (in)', 'foot (ft)'],\n    volume: ['liter (L)', 'milliliter (mL)', 'cubic meter (m³)', 'cubic centimeter (cm³)'],\n    distance: ['kilometer (km)', 'meter (m)', 'mile (mi)', 'yard (yd)'],\n    length: ['meter (m)', 'centimeter (cm)', 'millimeter (mm)', 'inch (in)'],\n    temperature: ['Celsius (°C)', 'Fahrenheit (°F)', 'Kelvin (K)'],\n    speed: ['meter per second (m/s)', 'kilometer per hour (km/h)', 'mile per hour (mph)']\n  };\n  const weightUnits = ['grams', 'kilograms', 'pounds', 'ounces'];\n  const convertWeight = () => {\n    let conversionFactor = 1;\n\n    // Conversion factors for weight\n    const conversionTable = {\n      grams: {\n        kilograms: 0.001,\n        pounds: 0.00220462,\n        ounces: 0.035274\n      },\n      kilograms: {\n        grams: 1000,\n        pounds: 2.20462,\n        ounces: 35.274\n      },\n      pounds: {\n        grams: 453.592,\n        kilograms: 0.453592,\n        ounces: 16\n      },\n      ounces: {\n        grams: 28.3495,\n        kilograms: 0.0283495,\n        pounds: 0.0625\n      }\n    };\n    if (fromUnit !== toUnit) {\n      conversionFactor = conversionTable[fromUnit][toUnit];\n    }\n    setResult(Number(inputValue) * conversionFactor);\n  };\n  const categories = Object.keys(units);\n  const handleCategoryChange = category => {\n    setFromUnit(units[category][0]);\n    setToUnit(units[category][1]);\n  };\n  const convert = () => {\n    // Conversion logic here\n    setResult('Converted value');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"measurement-conversion\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Measurement Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Category: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => handleCategoryChange(e.target.value),\n        children: categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category,\n          children: category\n        }, category, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversion-inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"From: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: fromUnit,\n          onChange: e => setFromUnit(e.target.value),\n          children: units[categories.find(cat => units[cat].includes(fromUnit))].map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: unit,\n            children: unit\n          }, unit, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"To: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: toUnit,\n          onChange: e => setToUnit(e.target.value),\n          children: units[categories.find(cat => units[cat].includes(toUnit))].map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: unit,\n            children: unit\n          }, unit, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: value,\n          onChange: e => setValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"convert-button\",\n      onClick: convert,\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversion-result\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Result: \", result]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(MeasurementConversion, \"wnpvdWbTpzm0fZ3pnIhCxagZxT8=\");\n_c = MeasurementConversion;\nexport default MeasurementConversion;\nvar _c;\n$RefreshReg$(_c, \"MeasurementConversion\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MeasurementConversion","_s","inputValue","setInputValue","result","setResult","fromUnit","setFromUnit","toUnit","setToUnit","value","setValue","units","weight","height","volume","distance","length","temperature","speed","weightUnits","convertWeight","conversionFactor","conversionTable","grams","kilograms","pounds","ounces","Number","categories","Object","keys","handleCategoryChange","category","convert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","map","find","cat","includes","unit","type","onClick","_c","$RefreshReg$"],"sources":["D:/portfolio/frontend/src/components/Web/MeasurementConversion.js"],"sourcesContent":["// src/MeasurementConversion.js\r\nimport React, { useState } from 'react';\r\nimport './calculator.css';\r\n\r\nconst MeasurementConversion = () => {\r\n   \r\n    const [inputValue, setInputValue] = useState('');\r\n    const [result, setResult] = useState('');\r\n    const [fromUnit, setFromUnit] = useState('gram');\r\n    const [toUnit, setToUnit] = useState('kilogram');\r\n    const [value, setValue] = useState('');\r\n   \r\n    const units = {\r\n        weight: ['gram (g)', 'kilogram (kg)', 'pound (lb)', 'ounce (oz)'],\r\n        height: ['meter (m)', 'centimeter (cm)', 'inch (in)', 'foot (ft)'],\r\n        volume: ['liter (L)', 'milliliter (mL)', 'cubic meter (m³)', 'cubic centimeter (cm³)'],\r\n        distance: ['kilometer (km)', 'meter (m)', 'mile (mi)', 'yard (yd)'],\r\n        length: ['meter (m)', 'centimeter (cm)', 'millimeter (mm)', 'inch (in)'],\r\n        temperature: ['Celsius (°C)', 'Fahrenheit (°F)', 'Kelvin (K)'],\r\n        speed: ['meter per second (m/s)', 'kilometer per hour (km/h)', 'mile per hour (mph)']\r\n    };\r\n    const weightUnits = ['grams', 'kilograms', 'pounds', 'ounces'];\r\n\r\n    const convertWeight = () => {\r\n        let conversionFactor = 1;\r\n\r\n        // Conversion factors for weight\r\n        const conversionTable = {\r\n            grams: {\r\n                kilograms: 0.001,\r\n                pounds: 0.00220462,\r\n                ounces: 0.035274,\r\n            },\r\n            kilograms: {\r\n                grams: 1000,\r\n                pounds: 2.20462,\r\n                ounces: 35.274,\r\n            },\r\n            pounds: {\r\n                grams: 453.592,\r\n                kilograms: 0.453592,\r\n                ounces: 16,\r\n            },\r\n            ounces: {\r\n                grams: 28.3495,\r\n                kilograms: 0.0283495,\r\n                pounds: 0.0625,\r\n            },\r\n        };\r\n\r\n        if (fromUnit !== toUnit) {\r\n            conversionFactor = conversionTable[fromUnit][toUnit];\r\n        }\r\n\r\n        setResult(Number(inputValue) * conversionFactor);\r\n    };\r\n\r\n  \r\n\r\n    const categories = Object.keys(units);\r\n\r\n    const handleCategoryChange = (category) => {\r\n        setFromUnit(units[category][0]);\r\n        setToUnit(units[category][1]);\r\n    };\r\n\r\n    const convert = () => {\r\n        // Conversion logic here\r\n        setResult('Converted value');\r\n    };\r\n\r\n    return (\r\n        <div className=\"measurement-conversion\">\r\n            <h2>Measurement Conversion</h2>\r\n\r\n            <div className=\"category-select\">\r\n                <label>Category: </label>\r\n                <select onChange={(e) => handleCategoryChange(e.target.value)}>\r\n                    {categories.map(category => (\r\n                        <option key={category} value={category}>{category}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"conversion-inputs\">\r\n                <div>\r\n                    <label>From: </label>\r\n                    <select value={fromUnit} onChange={(e) => setFromUnit(e.target.value)}>\r\n                        {units[categories.find(cat => units[cat].includes(fromUnit))].map(unit => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>To: </label>\r\n                    <select value={toUnit} onChange={(e) => setToUnit(e.target.value)}>\r\n                        {units[categories.find(cat => units[cat].includes(toUnit))].map(unit => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Value: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={value}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <button className=\"convert-button\" onClick={convert}>Convert</button>\r\n\r\n            {result && (\r\n                <div className=\"conversion-result\">\r\n                    <h3>Result: {result}</h3>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MeasurementConversion;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}