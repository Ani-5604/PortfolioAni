{"ast":null,"code":"import React,{useState}from'react';import'./calculator.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MeasurementConversion=()=>{const[inputValue,setInputValue]=useState('');const[result,setResult]=useState('');const[fromUnit,setFromUnit]=useState('gram (g)');const[toUnit,setToUnit]=useState('kilogram (kg)');const[category,setCategory]=useState('weight');const[value,setValue]=useState('value');const units={weight:['gram (g)','kilogram (kg)','pound (lb)','ounce (oz)'],height:['meter (m)','centimeter (cm)','inch (in)','foot (ft)'],volume:['liter (L)','milliliter (mL)','cubic meter (m³)','cubic centimeter (cm³)'],distance:['kilometer (km)','meter (m)','mile (mi)','yard (yd)'],length:['meter (m)','centimeter (cm)','millimeter (mm)','inch (in)'],temperature:['Celsius (°C)','Fahrenheit (°F)','Kelvin (K)'],speed:['meter per second (m/s)','kilometer per hour (km/h)','mile per hour (mph)']};const conversionTable={weight:{'gram (g)':{'kilogram (kg)':0.001,'pound (lb)':0.00220462,'ounce (oz)':0.035274},'kilogram (kg)':{'gram (g)':1000,'pound (lb)':2.20462,'ounce (oz)':35.274},'pound (lb)':{'gram (g)':453.592,'kilogram (kg)':0.453592,'ounce (oz)':16},'ounce (oz)':{'gram (g)':28.3495,'kilogram (kg)':0.0283495,'pound (lb)':0.0625}},height:{'meter (m)':{'centimeter (cm)':100,'inch (in)':39.3701,'foot (ft)':3.28084},'centimeter (cm)':{'meter (m)':0.01,'inch (in)':0.393701,'foot (ft)':0.0328084},'inch (in)':{'meter (m)':0.0254,'centimeter (cm)':2.54,'foot (ft)':0.0833333},'foot (ft)':{'meter (m)':0.3048,'centimeter (cm)':30.48,'inch (in)':12}},volume:{'liter (L)':{'milliliter (mL)':1000,'cubic meter (m³)':0.001,'cubic centimeter (cm³)':1000},'milliliter (mL)':{'liter (L)':0.001,'cubic meter (m³)':1e-6,'cubic centimeter (cm³)':1},'cubic meter (m³)':{'liter (L)':1000,'milliliter (mL)':1e6,'cubic centimeter (cm³)':1e6},'cubic centimeter (cm³)':{'liter (L)':0.001,'milliliter (mL)':1,'cubic meter (m³)':1e-6}},distance:{'kilometer (km)':{'meter (m)':1000,'mile (mi)':0.621371,'yard (yd)':1094},'meter (m)':{'kilometer (km)':0.001,'mile (mi)':0.000621371,'yard (yd)':1.09361},'mile (mi)':{'kilometer (km)':1.60934,'meter (m)':1609.34,'yard (yd)':1760},'yard (yd)':{'kilometer (km)':0.0009144,'meter (m)':0.9144,'mile (mi)':0.000568182}},length:{'meter (m)':{'centimeter (cm)':100,'millimeter (mm)':1000,'inch (in)':39.3701},'centimeter (cm)':{'meter (m)':0.01,'millimeter (mm)':10,'inch (in)':0.393701},'millimeter (mm)':{'meter (m)':0.001,'centimeter (cm)':0.1,'inch (in)':0.0393701},'inch (in)':{'meter (m)':0.0254,'centimeter (cm)':2.54,'millimeter (mm)':25.4}},temperature:{'Celsius (°C)':{'Fahrenheit (°F)':c=>c*9/5+32,'Kelvin (K)':c=>c+273.15},'Fahrenheit (°F)':{'Celsius (°C)':f=>(f-32)*5/9,'Kelvin (K)':f=>(f-32)*5/9+273.15},'Kelvin (K)':{'Celsius (°C)':k=>k-273.15,'Fahrenheit (°F)':k=>(k-273.15)*9/5+32}},speed:{'meter per second (m/s)':{'kilometer per hour (km/h)':3.6,'mile per hour (mph)':2.23694},'kilometer per hour (km/h)':{'meter per second (m/s)':0.277778,'mile per hour (mph)':0.621371},'mile per hour (mph)':{'meter per second (m/s)':0.44704,'kilometer per hour (km/h)':1.60934}}};const handleCategoryChange=category=>{setCategory(category);setFromUnit(units[category][0]);setToUnit(units[category][1]);};const convert=()=>{if(conversionTable[category]){const categoryConversions=conversionTable[category];let convertedValue='';if(typeof categoryConversions[fromUnit][toUnit]==='function'){convertedValue=categoryConversions[fromUnit][toUnit](Number(value));}else{const conversionFactor=categoryConversions[fromUnit][toUnit]||1;convertedValue=Number(value)*conversionFactor;}setResult(`${convertedValue.toFixed(2)} ${toUnit}`);}else{setResult('Conversion not supported');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"measurement-conversion\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Measurement Conversion\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"category-select\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Category: \"}),/*#__PURE__*/_jsx(\"select\",{onChange:e=>handleCategoryChange(e.target.value),value:category,children:Object.keys(units).map(cat=>/*#__PURE__*/_jsx(\"option\",{value:cat,children:cat},cat))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"conversion-inputs\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"From: \"}),/*#__PURE__*/_jsx(\"select\",{value:fromUnit,onChange:e=>setFromUnit(e.target.value),children:units[category].map(unit=>/*#__PURE__*/_jsx(\"option\",{value:unit,children:unit},unit))})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"To: \"}),/*#__PURE__*/_jsx(\"select\",{value:toUnit,onChange:e=>setToUnit(e.target.value),children:units[category].map(unit=>/*#__PURE__*/_jsx(\"option\",{value:unit,children:unit},unit))})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Value: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:value,onChange:e=>setValue(e.target.value)})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"convert-button\",onClick:convert,children:\"Convert\"}),result&&/*#__PURE__*/_jsx(\"div\",{className:\"conversion-result\",children:/*#__PURE__*/_jsxs(\"h3\",{children:[\"Result: \",result]})})]});};export default MeasurementConversion;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","MeasurementConversion","inputValue","setInputValue","result","setResult","fromUnit","setFromUnit","toUnit","setToUnit","category","setCategory","value","setValue","units","weight","height","volume","distance","length","temperature","speed","conversionTable","c","f","k","handleCategoryChange","convert","categoryConversions","convertedValue","Number","conversionFactor","toFixed","className","children","onChange","e","target","Object","keys","map","cat","unit","type","onClick"],"sources":["D:/New folder (2)/portfolio/frontend/src/components/Web/MeasurementConversion.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './calculator.css';\r\n\r\nconst MeasurementConversion = () => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [result, setResult] = useState('');\r\n    const [fromUnit, setFromUnit] = useState('gram (g)');\r\n    const [toUnit, setToUnit] = useState('kilogram (kg)');\r\n    const [category, setCategory] = useState('weight');\r\n    const [value,setValue]=useState('value');\r\n\r\n    const units = {\r\n        weight: ['gram (g)', 'kilogram (kg)', 'pound (lb)', 'ounce (oz)'],\r\n        height: ['meter (m)', 'centimeter (cm)', 'inch (in)', 'foot (ft)'],\r\n        volume: ['liter (L)', 'milliliter (mL)', 'cubic meter (m³)', 'cubic centimeter (cm³)'],\r\n        distance: ['kilometer (km)', 'meter (m)', 'mile (mi)', 'yard (yd)'],\r\n        length: ['meter (m)', 'centimeter (cm)', 'millimeter (mm)', 'inch (in)'],\r\n        temperature: ['Celsius (°C)', 'Fahrenheit (°F)', 'Kelvin (K)'],\r\n        speed: ['meter per second (m/s)', 'kilometer per hour (km/h)', 'mile per hour (mph)']\r\n    };\r\n\r\n    const conversionTable = {\r\n        weight: {\r\n            'gram (g)': {\r\n                'kilogram (kg)': 0.001,\r\n                'pound (lb)': 0.00220462,\r\n                'ounce (oz)': 0.035274,\r\n            },\r\n            'kilogram (kg)': {\r\n                'gram (g)': 1000,\r\n                'pound (lb)': 2.20462,\r\n                'ounce (oz)': 35.274,\r\n            },\r\n            'pound (lb)': {\r\n                'gram (g)': 453.592,\r\n                'kilogram (kg)': 0.453592,\r\n                'ounce (oz)': 16,\r\n            },\r\n            'ounce (oz)': {\r\n                'gram (g)': 28.3495,\r\n                'kilogram (kg)': 0.0283495,\r\n                'pound (lb)': 0.0625,\r\n            },\r\n        },\r\n        height: {\r\n            'meter (m)': {\r\n                'centimeter (cm)': 100,\r\n                'inch (in)': 39.3701,\r\n                'foot (ft)': 3.28084,\r\n            },\r\n            'centimeter (cm)': {\r\n                'meter (m)': 0.01,\r\n                'inch (in)': 0.393701,\r\n                'foot (ft)': 0.0328084,\r\n            },\r\n            'inch (in)': {\r\n                'meter (m)': 0.0254,\r\n                'centimeter (cm)': 2.54,\r\n                'foot (ft)': 0.0833333,\r\n            },\r\n            'foot (ft)': {\r\n                'meter (m)': 0.3048,\r\n                'centimeter (cm)': 30.48,\r\n                'inch (in)': 12,\r\n            },\r\n        },\r\n        volume: {\r\n            'liter (L)': {\r\n                'milliliter (mL)': 1000,\r\n                'cubic meter (m³)': 0.001,\r\n                'cubic centimeter (cm³)': 1000,\r\n            },\r\n            'milliliter (mL)': {\r\n                'liter (L)': 0.001,\r\n                'cubic meter (m³)': 1e-6,\r\n                'cubic centimeter (cm³)': 1,\r\n            },\r\n            'cubic meter (m³)': {\r\n                'liter (L)': 1000,\r\n                'milliliter (mL)': 1e6,\r\n                'cubic centimeter (cm³)': 1e6,\r\n            },\r\n            'cubic centimeter (cm³)': {\r\n                'liter (L)': 0.001,\r\n                'milliliter (mL)': 1,\r\n                'cubic meter (m³)': 1e-6,\r\n            },\r\n        },\r\n        distance: {\r\n            'kilometer (km)': {\r\n                'meter (m)': 1000,\r\n                'mile (mi)': 0.621371,\r\n                'yard (yd)': 1094,\r\n            },\r\n            'meter (m)': {\r\n                'kilometer (km)': 0.001,\r\n                'mile (mi)': 0.000621371,\r\n                'yard (yd)': 1.09361,\r\n            },\r\n            'mile (mi)': {\r\n                'kilometer (km)': 1.60934,\r\n                'meter (m)': 1609.34,\r\n                'yard (yd)': 1760,\r\n            },\r\n            'yard (yd)': {\r\n                'kilometer (km)': 0.0009144,\r\n                'meter (m)': 0.9144,\r\n                'mile (mi)': 0.000568182,\r\n            },\r\n        },\r\n        length: {\r\n            'meter (m)': {\r\n                'centimeter (cm)': 100,\r\n                'millimeter (mm)': 1000,\r\n                'inch (in)': 39.3701,\r\n            },\r\n            'centimeter (cm)': {\r\n                'meter (m)': 0.01,\r\n                'millimeter (mm)': 10,\r\n                'inch (in)': 0.393701,\r\n            },\r\n            'millimeter (mm)': {\r\n                'meter (m)': 0.001,\r\n                'centimeter (cm)': 0.1,\r\n                'inch (in)': 0.0393701,\r\n            },\r\n            'inch (in)': {\r\n                'meter (m)': 0.0254,\r\n                'centimeter (cm)': 2.54,\r\n                'millimeter (mm)': 25.4,\r\n            },\r\n        },\r\n        temperature: {\r\n            'Celsius (°C)': {\r\n                'Fahrenheit (°F)': (c) => (c * 9/5) + 32,\r\n                'Kelvin (K)': (c) => c + 273.15,\r\n            },\r\n            'Fahrenheit (°F)': {\r\n                'Celsius (°C)': (f) => (f - 32) * 5/9,\r\n                'Kelvin (K)': (f) => (f - 32) * 5/9 + 273.15,\r\n            },\r\n            'Kelvin (K)': {\r\n                'Celsius (°C)': (k) => k - 273.15,\r\n                'Fahrenheit (°F)': (k) => (k - 273.15) * 9/5 + 32,\r\n            },\r\n        },\r\n        speed: {\r\n            'meter per second (m/s)': {\r\n                'kilometer per hour (km/h)': 3.6,\r\n                'mile per hour (mph)': 2.23694,\r\n            },\r\n            'kilometer per hour (km/h)': {\r\n                'meter per second (m/s)': 0.277778,\r\n                'mile per hour (mph)': 0.621371,\r\n            },\r\n            'mile per hour (mph)': {\r\n                'meter per second (m/s)': 0.44704,\r\n                'kilometer per hour (km/h)': 1.60934,\r\n            },\r\n        },\r\n    };\r\n\r\n    const handleCategoryChange = (category) => {\r\n        setCategory(category);\r\n        setFromUnit(units[category][0]);\r\n        setToUnit(units[category][1]);\r\n    };\r\n\r\n    const convert = () => {\r\n        if (conversionTable[category]) {\r\n            const categoryConversions = conversionTable[category];\r\n            let convertedValue = '';\r\n\r\n            if (typeof categoryConversions[fromUnit][toUnit] === 'function') {\r\n                convertedValue = categoryConversions[fromUnit][toUnit](Number(value));\r\n            } else {\r\n                const conversionFactor = categoryConversions[fromUnit][toUnit] || 1;\r\n                convertedValue = Number(value) * conversionFactor;\r\n            }\r\n\r\n            setResult(`${convertedValue.toFixed(2)} ${toUnit}`);\r\n        } else {\r\n            setResult('Conversion not supported');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"measurement-conversion\">\r\n            <h2>Measurement Conversion</h2>\r\n\r\n            <div className=\"category-select\">\r\n                <label>Category: </label>\r\n                <select onChange={(e) => handleCategoryChange(e.target.value)} value={category}>\r\n                    {Object.keys(units).map(cat => (\r\n                        <option key={cat} value={cat}>{cat}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"conversion-inputs\">\r\n                <div>\r\n                    <label>From: </label>\r\n                    <select value={fromUnit} onChange={(e) => setFromUnit(e.target.value)}>\r\n                        {units[category].map(unit => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>To: </label>\r\n                    <select value={toUnit} onChange={(e) => setToUnit(e.target.value)}>\r\n                        {units[category].map(unit => (\r\n                            <option key={unit} value={unit}>{unit}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Value: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={value}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <button className=\"convert-button\" onClick={convert}>Convert</button>\r\n\r\n            {result && (\r\n                <div className=\"conversion-result\">\r\n                    <h3>Result: {result}</h3>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MeasurementConversion;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,KAAM,CAAAC,qBAAqB,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACQ,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,UAAU,CAAC,CACpD,KAAM,CAACY,MAAM,CAAEC,SAAS,CAAC,CAAGb,QAAQ,CAAC,eAAe,CAAC,CACrD,KAAM,CAACc,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,QAAQ,CAAC,CAClD,KAAM,CAACgB,KAAK,CAACC,QAAQ,CAAC,CAACjB,QAAQ,CAAC,OAAO,CAAC,CAExC,KAAM,CAAAkB,KAAK,CAAG,CACVC,MAAM,CAAE,CAAC,UAAU,CAAE,eAAe,CAAE,YAAY,CAAE,YAAY,CAAC,CACjEC,MAAM,CAAE,CAAC,WAAW,CAAE,iBAAiB,CAAE,WAAW,CAAE,WAAW,CAAC,CAClEC,MAAM,CAAE,CAAC,WAAW,CAAE,iBAAiB,CAAE,kBAAkB,CAAE,wBAAwB,CAAC,CACtFC,QAAQ,CAAE,CAAC,gBAAgB,CAAE,WAAW,CAAE,WAAW,CAAE,WAAW,CAAC,CACnEC,MAAM,CAAE,CAAC,WAAW,CAAE,iBAAiB,CAAE,iBAAiB,CAAE,WAAW,CAAC,CACxEC,WAAW,CAAE,CAAC,cAAc,CAAE,iBAAiB,CAAE,YAAY,CAAC,CAC9DC,KAAK,CAAE,CAAC,wBAAwB,CAAE,2BAA2B,CAAE,qBAAqB,CACxF,CAAC,CAED,KAAM,CAAAC,eAAe,CAAG,CACpBP,MAAM,CAAE,CACJ,UAAU,CAAE,CACR,eAAe,CAAE,KAAK,CACtB,YAAY,CAAE,UAAU,CACxB,YAAY,CAAE,QAClB,CAAC,CACD,eAAe,CAAE,CACb,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,OAAO,CACrB,YAAY,CAAE,MAClB,CAAC,CACD,YAAY,CAAE,CACV,UAAU,CAAE,OAAO,CACnB,eAAe,CAAE,QAAQ,CACzB,YAAY,CAAE,EAClB,CAAC,CACD,YAAY,CAAE,CACV,UAAU,CAAE,OAAO,CACnB,eAAe,CAAE,SAAS,CAC1B,YAAY,CAAE,MAClB,CACJ,CAAC,CACDC,MAAM,CAAE,CACJ,WAAW,CAAE,CACT,iBAAiB,CAAE,GAAG,CACtB,WAAW,CAAE,OAAO,CACpB,WAAW,CAAE,OACjB,CAAC,CACD,iBAAiB,CAAE,CACf,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,QAAQ,CACrB,WAAW,CAAE,SACjB,CAAC,CACD,WAAW,CAAE,CACT,WAAW,CAAE,MAAM,CACnB,iBAAiB,CAAE,IAAI,CACvB,WAAW,CAAE,SACjB,CAAC,CACD,WAAW,CAAE,CACT,WAAW,CAAE,MAAM,CACnB,iBAAiB,CAAE,KAAK,CACxB,WAAW,CAAE,EACjB,CACJ,CAAC,CACDC,MAAM,CAAE,CACJ,WAAW,CAAE,CACT,iBAAiB,CAAE,IAAI,CACvB,kBAAkB,CAAE,KAAK,CACzB,wBAAwB,CAAE,IAC9B,CAAC,CACD,iBAAiB,CAAE,CACf,WAAW,CAAE,KAAK,CAClB,kBAAkB,CAAE,IAAI,CACxB,wBAAwB,CAAE,CAC9B,CAAC,CACD,kBAAkB,CAAE,CAChB,WAAW,CAAE,IAAI,CACjB,iBAAiB,CAAE,GAAG,CACtB,wBAAwB,CAAE,GAC9B,CAAC,CACD,wBAAwB,CAAE,CACtB,WAAW,CAAE,KAAK,CAClB,iBAAiB,CAAE,CAAC,CACpB,kBAAkB,CAAE,IACxB,CACJ,CAAC,CACDC,QAAQ,CAAE,CACN,gBAAgB,CAAE,CACd,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,QAAQ,CACrB,WAAW,CAAE,IACjB,CAAC,CACD,WAAW,CAAE,CACT,gBAAgB,CAAE,KAAK,CACvB,WAAW,CAAE,WAAW,CACxB,WAAW,CAAE,OACjB,CAAC,CACD,WAAW,CAAE,CACT,gBAAgB,CAAE,OAAO,CACzB,WAAW,CAAE,OAAO,CACpB,WAAW,CAAE,IACjB,CAAC,CACD,WAAW,CAAE,CACT,gBAAgB,CAAE,SAAS,CAC3B,WAAW,CAAE,MAAM,CACnB,WAAW,CAAE,WACjB,CACJ,CAAC,CACDC,MAAM,CAAE,CACJ,WAAW,CAAE,CACT,iBAAiB,CAAE,GAAG,CACtB,iBAAiB,CAAE,IAAI,CACvB,WAAW,CAAE,OACjB,CAAC,CACD,iBAAiB,CAAE,CACf,WAAW,CAAE,IAAI,CACjB,iBAAiB,CAAE,EAAE,CACrB,WAAW,CAAE,QACjB,CAAC,CACD,iBAAiB,CAAE,CACf,WAAW,CAAE,KAAK,CAClB,iBAAiB,CAAE,GAAG,CACtB,WAAW,CAAE,SACjB,CAAC,CACD,WAAW,CAAE,CACT,WAAW,CAAE,MAAM,CACnB,iBAAiB,CAAE,IAAI,CACvB,iBAAiB,CAAE,IACvB,CACJ,CAAC,CACDC,WAAW,CAAE,CACT,cAAc,CAAE,CACZ,iBAAiB,CAAGG,CAAC,EAAMA,CAAC,CAAG,CAAC,CAAC,CAAC,CAAI,EAAE,CACxC,YAAY,CAAGA,CAAC,EAAKA,CAAC,CAAG,MAC7B,CAAC,CACD,iBAAiB,CAAE,CACf,cAAc,CAAGC,CAAC,EAAK,CAACA,CAAC,CAAG,EAAE,EAAI,CAAC,CAAC,CAAC,CACrC,YAAY,CAAGA,CAAC,EAAK,CAACA,CAAC,CAAG,EAAE,EAAI,CAAC,CAAC,CAAC,CAAG,MAC1C,CAAC,CACD,YAAY,CAAE,CACV,cAAc,CAAGC,CAAC,EAAKA,CAAC,CAAG,MAAM,CACjC,iBAAiB,CAAGA,CAAC,EAAK,CAACA,CAAC,CAAG,MAAM,EAAI,CAAC,CAAC,CAAC,CAAG,EACnD,CACJ,CAAC,CACDJ,KAAK,CAAE,CACH,wBAAwB,CAAE,CACtB,2BAA2B,CAAE,GAAG,CAChC,qBAAqB,CAAE,OAC3B,CAAC,CACD,2BAA2B,CAAE,CACzB,wBAAwB,CAAE,QAAQ,CAClC,qBAAqB,CAAE,QAC3B,CAAC,CACD,qBAAqB,CAAE,CACnB,wBAAwB,CAAE,OAAO,CACjC,2BAA2B,CAAE,OACjC,CACJ,CACJ,CAAC,CAED,KAAM,CAAAK,oBAAoB,CAAIhB,QAAQ,EAAK,CACvCC,WAAW,CAACD,QAAQ,CAAC,CACrBH,WAAW,CAACO,KAAK,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAC/BD,SAAS,CAACK,KAAK,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CACjC,CAAC,CAED,KAAM,CAAAiB,OAAO,CAAGA,CAAA,GAAM,CAClB,GAAIL,eAAe,CAACZ,QAAQ,CAAC,CAAE,CAC3B,KAAM,CAAAkB,mBAAmB,CAAGN,eAAe,CAACZ,QAAQ,CAAC,CACrD,GAAI,CAAAmB,cAAc,CAAG,EAAE,CAEvB,GAAI,MAAO,CAAAD,mBAAmB,CAACtB,QAAQ,CAAC,CAACE,MAAM,CAAC,GAAK,UAAU,CAAE,CAC7DqB,cAAc,CAAGD,mBAAmB,CAACtB,QAAQ,CAAC,CAACE,MAAM,CAAC,CAACsB,MAAM,CAAClB,KAAK,CAAC,CAAC,CACzE,CAAC,IAAM,CACH,KAAM,CAAAmB,gBAAgB,CAAGH,mBAAmB,CAACtB,QAAQ,CAAC,CAACE,MAAM,CAAC,EAAI,CAAC,CACnEqB,cAAc,CAAGC,MAAM,CAAClB,KAAK,CAAC,CAAGmB,gBAAgB,CACrD,CAEA1B,SAAS,CAAC,GAAGwB,cAAc,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIxB,MAAM,EAAE,CAAC,CACvD,CAAC,IAAM,CACHH,SAAS,CAAC,0BAA0B,CAAC,CACzC,CACJ,CAAC,CAED,mBACIL,KAAA,QAAKiC,SAAS,CAAC,wBAAwB,CAAAC,QAAA,eACnCpC,IAAA,OAAAoC,QAAA,CAAI,wBAAsB,CAAI,CAAC,cAE/BlC,KAAA,QAAKiC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC5BpC,IAAA,UAAAoC,QAAA,CAAO,YAAU,CAAO,CAAC,cACzBpC,IAAA,WAAQqC,QAAQ,CAAGC,CAAC,EAAKV,oBAAoB,CAACU,CAAC,CAACC,MAAM,CAACzB,KAAK,CAAE,CAACA,KAAK,CAAEF,QAAS,CAAAwB,QAAA,CAC1EI,MAAM,CAACC,IAAI,CAACzB,KAAK,CAAC,CAAC0B,GAAG,CAACC,GAAG,eACvB3C,IAAA,WAAkBc,KAAK,CAAE6B,GAAI,CAAAP,QAAA,CAAEO,GAAG,EAArBA,GAA8B,CAC9C,CAAC,CACE,CAAC,EACR,CAAC,cAENzC,KAAA,QAAKiC,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAC9BlC,KAAA,QAAAkC,QAAA,eACIpC,IAAA,UAAAoC,QAAA,CAAO,QAAM,CAAO,CAAC,cACrBpC,IAAA,WAAQc,KAAK,CAAEN,QAAS,CAAC6B,QAAQ,CAAGC,CAAC,EAAK7B,WAAW,CAAC6B,CAAC,CAACC,MAAM,CAACzB,KAAK,CAAE,CAAAsB,QAAA,CACjEpB,KAAK,CAACJ,QAAQ,CAAC,CAAC8B,GAAG,CAACE,IAAI,eACrB5C,IAAA,WAAmBc,KAAK,CAAE8B,IAAK,CAAAR,QAAA,CAAEQ,IAAI,EAAxBA,IAAiC,CACjD,CAAC,CACE,CAAC,EACR,CAAC,cACN1C,KAAA,QAAAkC,QAAA,eACIpC,IAAA,UAAAoC,QAAA,CAAO,MAAI,CAAO,CAAC,cACnBpC,IAAA,WAAQc,KAAK,CAAEJ,MAAO,CAAC2B,QAAQ,CAAGC,CAAC,EAAK3B,SAAS,CAAC2B,CAAC,CAACC,MAAM,CAACzB,KAAK,CAAE,CAAAsB,QAAA,CAC7DpB,KAAK,CAACJ,QAAQ,CAAC,CAAC8B,GAAG,CAACE,IAAI,eACrB5C,IAAA,WAAmBc,KAAK,CAAE8B,IAAK,CAAAR,QAAA,CAAEQ,IAAI,EAAxBA,IAAiC,CACjD,CAAC,CACE,CAAC,EACR,CAAC,cACN1C,KAAA,QAAAkC,QAAA,eACIpC,IAAA,UAAAoC,QAAA,CAAO,SAAO,CAAO,CAAC,cACtBpC,IAAA,UACI6C,IAAI,CAAC,QAAQ,CACb/B,KAAK,CAAEA,KAAM,CACbuB,QAAQ,CAAGC,CAAC,EAAKvB,QAAQ,CAACuB,CAAC,CAACC,MAAM,CAACzB,KAAK,CAAE,CAC7C,CAAC,EACD,CAAC,EACL,CAAC,cAENd,IAAA,WAAQmC,SAAS,CAAC,gBAAgB,CAACW,OAAO,CAAEjB,OAAQ,CAAAO,QAAA,CAAC,SAAO,CAAQ,CAAC,CAEpE9B,MAAM,eACHN,IAAA,QAAKmC,SAAS,CAAC,mBAAmB,CAAAC,QAAA,cAC9BlC,KAAA,OAAAkC,QAAA,EAAI,UAAQ,CAAC9B,MAAM,EAAK,CAAC,CACxB,CACR,EACA,CAAC,CAEd,CAAC,CAED,cAAe,CAAAH,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}